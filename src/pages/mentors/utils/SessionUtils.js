import React from "react";
import { LiveSiteUtils } from "../../LiveEvent/utils/LiveSiteUtil";
import uuid from "react-uuid"

export const SessionUtils = {

    /**
     * This helper method takes in an object array that is in the format [{start: ISODateString, end: ISODateString}]
     * This is to reformat the timeslot data structure to add more attributes including:
     * - _id: string generated by uuid()
     * - day: integer of the day of the week
     * - start: string of the time of the start date
     * - end: string of of the time of the end date
     * - filled: empty object for reservees
     * - actual_start: date object of the start timeslot
     * - actual_end: date object of the end timeslot
     * @param {Array} timeslots - object array in the format [{start: ISODateString, end: ISODateString}]
     * Returns an object array of the timeslots with the added attributes
     */
    reformatTimeslots(timeslots) {
        const restructureDates = {}

        timeslots.map((timeslot) => {
            var currWeek = LiveSiteUtils.getStartEndCurrWeek(timeslot["start"])
            if (restructureDates[currWeek] == undefined) {
                restructureDates[currWeek] = []
            }

            restructureDates[currWeek].push({
                "day": timeslot["start"].getDay(),
                "_id": uuid().toString(),
                "actual_start": timeslot["start"],
                "actual_end": timeslot["end"],
                "start": timeslot["start"].toTimeString(),
                "end": timeslot["end"].toTimeString(),
                "filled": {}
            })
        })

        return restructureDates;
    },

    /**
     * 
     */
    getInstruction(step) {
        if (step == 1) {
            return {title: "Create session",
                message: "Fill out the form with your basic information. A name is required."}
        }
        if (step == 2) {
            return {"title": "Schedule",
                    "message": "Select timeslots that you're available on. Drag the end of each timeslot downward or upward with your mouse. "}
        }
        if (step == 3) {
            return {"title": "Finished!",
            "message": ""}
        }
    },

    /**
     * Get a gradient color
     */
    getGradColors() {
        return [
            "linear-gradient(-45deg, #ff1ea5, #ff8b8b, #4742c0, #9da1ff)",
            "linear-gradient(136.53deg, #B779E8 3.42%, #706DFF 48.12%, #65FFDA 101.51%)",
            "linear-gradient(136.53deg, #6DFFF6 3.42%, #30BBF6 50.93%, #BBFF65 101.51%)",
            "linear-gradient(136.53deg, #FE9C66 3.42%, #FF6D6D 48.12%, #FCFF65 101.51%)",
            "linear-gradient(136.53deg, #F6CA30 3.42%, #FFA26D 48.12%, #BCFF66 101.51%)",
            "linear-gradient(136.53deg, #77FFAD 3.42%, #2CA5CB 48.12%, #66EDFF 101.51%)",
            "linear-gradient(136.53deg, #FD94FF 3.42%, #BA3DE6 51.51%, #FFF966 101.51%)",
            "linear-gradient(136.53deg, #D694FF 3.42%, #3D4EE6 51.51%, #66F6FF 101.51%)",
            "linear-gradient(136.53deg, #FFBA94 3.42%, #3D6CE6 51.51%, #FC66FF 101.51%)",
            "linear-gradient(136.53deg, #FF9A94 3.42%, #E63D8E 51.51%, #FFDAC6 101.51%)",
            "linear-gradient(136.53deg, #94A5FF 3.42%, #E63D8E 67.57%, #FFDAC6 101.51%)",
            "linear-gradient(136.53deg, #94F9FF 3.42%, #3D6CE6 55.25%, #D8C6FF 101.51%)"
        ]
    }

}